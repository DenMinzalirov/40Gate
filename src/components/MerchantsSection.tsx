'use client'

import { useEffect, useRef } from 'react'
import Image from 'next/image'
import MerchantsSectionCard from './MerchantsSectionCard'

const MerchantsSection = () => {
    const stackCardsRef = useRef<HTMLUListElement>(null)

    const blocks = [
        {
            number: "(01)",
            title: "Payment Methods",
            description: "From crypto to local bank transfers - we support 300+ payment methods to ensure your customers always find a way to pay.",
            image: "/payment-methods.png",
            bgColor: "bg-[#F2F4F3]",
            textColor: "text-[#1E1E1E]",
            imageHeight: 314,
            mobileImageHeight: 210
        },
        {
            number: "(02)",
            title: "Payment Orchestration",
            description: "From crypto to local bank transfers - we support 300+ payment methods to ensure your customers always find a way to pay.",
            image: "/payment-orchestration.png",
            bgColor: "bg-[#0008D4]",
            textColor: "text-[#F2F4F3]",
            imageHeight: 314,
            mobileImageHeight: 221
        },
        {
            number: "(03)",
            title: "Chargeback Prevention",
            description: "Reduce risk and retain revenue with proactive chargeback management. We help identify patterns, prevent disputes, and guide you with best practices to keep chargebacks under control.",
            image: "/chargeback-prevention.png",
            bgColor: "bg-[#1E1E1E]",
            textColor: "text-[#FFFFFF]",
            imageHeight: 325,
            mobileImageHeight: 221
        },
        {
            number: "(04)",
            title: "Fraud Monitoring",
            description: "Stay protected with real-time fraud detection powered by machine learning. Our system flags suspicious activity early-helping you prevent losses without blocking legitimate customers.",
            image: "/fraud-monitoring.png",
            bgColor: "bg-[#F2F4F3]",
            textColor: "text-[#1E1E1E]",
            imageHeight: 313,
            mobileImageHeight: 218
        }
    ]

    useEffect(() => {
        if (!stackCardsRef.current) return

        const element = stackCardsRef.current

        const items = element.getElementsByClassName('js-stack-cards__item')
        let scrollingFn: (() => void) | false = false
        let scrolling = false

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSS —Å–≤–æ–π—Å—Ç–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
        const setStackCards = () => {
            const marginY = 24 // gap –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ px
            const elementHeight = element.offsetHeight
            const cardStyle = getComputedStyle(items[0] as Element)
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ top –∏–∑ —Å—Ç–∏–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const cardTop = Math.floor(parseFloat(cardStyle.getPropertyValue('top'))) || 200
            // console.log({ cardTop })
            const cardHeight = Math.floor(parseFloat(cardStyle.getPropertyValue('height')))
            const windowHeight = window.innerHeight

            // –õ–∏–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ - –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            const animationStartLine = cardTop + 600 // —Å–º–µ—â–∞–µ–º –Ω–∞ 300px –Ω–∏–∂–µ sticky –ø–æ–∑–∏—Ü–∏–∏
            // console.log({ animationStartLine })
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
            // const textBlock = document.getElementById('text-block') as HTMLElement
            // if (textBlock) {
            //     const textBlockRect = textBlock.getBoundingClientRect()
            //     const textBlockBottom = textBlockRect.bottom
            //     console.log('Text block bottom coordinate:', textBlockBottom)
            //     console.log('Text block rect:', textBlockRect)
            // }

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ padding –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            element.style.paddingBottom = (marginY * (items.length - 1)) + 'px'

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
            for (let i = 0; i < items.length; i++) {
                (items[i] as HTMLElement).style.transform = `translateY(${marginY * i}px)`
            }

            return { marginY, elementHeight, cardTop, cardHeight, windowHeight, animationStartLine }
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        const animateStackCards = () => {
            const { marginY, elementHeight, cardTop, cardHeight, windowHeight, animationStartLine } = setStackCards()
            // console.log({cardTop, cardHeight, windowHeight, elementHeight, marginY});

            const top = element.getBoundingClientRect().top
            // console.log('Element top position:', top, 'Animation start line:', animationStartLine)

            // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –±–ª–æ–∫ –ø—Ä–∏–ª–∏–ø–∞–µ—Ç –∫ –≤–µ—Ä—Ö—É
            if (top <= 200) {
                console.log('üöÄ –ë–ª–æ–∫ –ø—Ä–∏–ª–∏–ø –∫ –≤–µ—Ä—Ö—É! top =', top)
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
            const textBlock = document.getElementById('text-block') as HTMLElement
            if (textBlock) {
                const textBlockRect = textBlock.getBoundingClientRect()
                const textBlockTop = textBlockRect.top
                // console.log('üìù Text block top position:', textBlockTop)

                // –ö–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
                if (textBlockTop <= 0) {
                    const textBlockHeight = textBlockRect.height + 100
                    // console.log('üéØ –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞!')
                    // console.log('üìè –ü–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞:', textBlockHeight, 'px')
                    // console.log('üìç –ü–æ–∑–∏—Ü–∏—è top:', textBlockTop, 'px')

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫–∞–∫ top –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
                    for (let i = 0; i < items.length; i++) {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º top –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
                        const isMobile = window.innerWidth <= 640
                        const topValue = isMobile ? 30 : textBlockHeight
                            ; (items[i] as HTMLElement).style.top = `${topValue}px`
                    }
                    console.log('üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω top –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫:', textBlockHeight, 'px')
                }
            }

            if (animationStartLine - top + windowHeight - elementHeight - cardHeight + marginY + marginY * items.length > 0) {
                scrolling = false
                return
            }

            for (let i = 0; i < items.length; i++) {
                const scrollingDistance = animationStartLine - top - i * (cardHeight + marginY)

                if (scrollingDistance > 0) {
                    // –ö–∞—Ä—Ç–æ—á–∫–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ - –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    ; (items[i] as HTMLElement).style.transform = `translateY(0px)`
                    // console.log(`üìå –ö–∞—Ä—Ç–æ—á–∫–∞ ${i}: –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, scrollingDistance = ${scrollingDistance}`)
                } else {
                    // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                    ; (items[i] as HTMLElement).style.transform = `translateY(${marginY * i}px)`
                    // console.log(`üéØ –ö–∞—Ä—Ç–æ—á–∫–∞ ${i}: –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏—é ${marginY * i}px`)

                    // –õ–æ–≥–∏—Ä—É–µ–º –≤–∏–¥–∏–º—É—é —á–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                    // const cardRect = (items[i] as HTMLElement).getBoundingClientRect()
                    // const visibleHeight = Math.min(cardRect.bottom, window.innerHeight) - Math.max(cardRect.top, 0)
                    // console.log(`üëÅÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ ${i}: –≤–∏–¥–∏–º–∞—è –≤—ã—Å–æ—Ç–∞ = ${visibleHeight}px, top = ${cardRect.top}, bottom = ${cardRect.bottom}`)
                }
            }
            scrolling = false
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
        const stackCardsScrolling = () => {
            if (scrolling) return
            scrolling = true
            requestAnimationFrame(animateStackCards)
        }

        // Intersection Observer –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                if (scrollingFn) return
                scrollingFn = stackCardsScrolling
                window.addEventListener('scroll', scrollingFn)
            } else {
                if (!scrollingFn) return
                window.removeEventListener('scroll', scrollingFn)
                scrollingFn = false
            }
        }, { threshold: [0, 1] })

        observer.observe(element)

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ resize
        const handleResize = () => {
            setStackCards()
            animateStackCards()
        }

        window.addEventListener('resize', handleResize)

        return () => {
            observer.disconnect()
            window.removeEventListener('resize', handleResize)
            if (scrollingFn) {
                window.removeEventListener('scroll', scrollingFn)
            }
        }
    }, [])

    return (
        <section id="merchants-section" className="w-full pt-[120px] sm:pt-[200px] px-5 sm:px-10">
            <div className="w-full max-w-[1440px] mx-auto">
                {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ */}
                <div
                    id="text-block"
                    className="flex flex-col sm:flex-row sm:justify-between sm:items-end self-stretch flex-grow-0 relative gap-6 sm:gap-0 mb-[100px] sm:sticky sm:-top-10"
                >
                    <div className="flex flex-col justify-start items-start flex-grow-0 w-full gap-6 sm:gap-[30px]">
                        <div className="flex justify-start items-center self-stretch flex-grow-0 flex-shrink-0 relative gap-3">
                            {/* SVG –∏–∫–æ–Ω–∫–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è */}
                            <svg
                                width="13"
                                height="14"
                                viewBox="0 0 13 14"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                className="flex-grow-0 flex-shrink-0 sm:w-[14px] sm:h-[14px]"
                                preserveAspectRatio="none"
                            >
                                <circle cx="6.25" cy="7" r="6.25" fill="#0008D4" />
                            </svg>
                            <p className="flex-grow-0 flex-shrink-0 text-xl sm:text-2xl text-left text-[#1e1e1e] font-instrument-sans">
                                For merchants
                            </p>
                        </div>
                        <div className="flex flex-col justify-start items-start self-stretch flex-grow-0 relative gap-3.5">
                            <p className="self-stretch flex-grow-0 flex-shrink-0 w-full sm:max-w-[1067px] text-3xl sm:text-[55px] text-left text-[#1e1e1e] font-tinos leading-tight">
                                AI-powered tools to scale your business ‚Äî from smart cascading to chargeback prevention.
                                Modern payment infrastructure built with machine learning created for global growth.
                            </p>
                        </div>
                    </div>
                    {/* –ù–æ–º–µ—Ä - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
                    <p className="hidden sm:block flex-grow-0 flex-shrink-0 text-[55px] text-left text-[#0008D4] font-tinos">
                        (01)
                    </p>
                </div>

                <ul ref={stackCardsRef} className="stack-cards js-stack-cards">
                    {blocks.map((block, index) => {
                        return <li
                            key={index}
                            className={`stack-cards__item js-stack-cards__item`}
                        >
                            <MerchantsSectionCard
                                number={block.number}
                                title={block.title}
                                description={block.description}
                                image={<Image
                                    src={block.image}
                                    alt={block.title}
                                    width={224}
                                    height={214}
                                    className="flex-grow-0 flex-shrink-0 sm:min-w-[324px] min-w-[214px] order-2 sm:order-none mx-auto sm:mx-0 my-6 sm:my-0"
                                />}
                                bgColor={block.bgColor}
                                textColor={block.textColor}
                            />
                        </li>
                    })}
                </ul>
            </div>
        </section>
    )
}

export default MerchantsSection 